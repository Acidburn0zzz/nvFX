/*-----------------------------------------------------------------------
    Copyright (c) 2013, Tristan Lorach. All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
     * Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
     * Neither the name of its contributors may be used to endorse 
       or promote products derived from this software without specific
       prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
    OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

    feedback to lorachnroll@gmail.com (Tristan Lorach)
*/ //--------------------------------------------------------------------
#extension GL_ARB_separate_shader_objects : enable
GLSLShader
{
    #version 330 compatibility
    void mainImage( out vec4 fragColor, in vec2 fragCoord );
}
uniform vec3 iResolution;
uniform float iGlobalTime;
uniform float iChannelTime[4];
uniform vec4 iMouse;
uniform vec4 iDate;
uniform float iSampleRate;
uniform vec3 iChannelResolution[4];

//--------------------------------------------------------------------------------------
// sampler states are outside of GLSL.
//--------------------------------------------------------------------------------------
GLSLShader global SToy1
{
    float sdCapsule( vec3 p, vec3 a, vec3 b, float r )
    {
	    vec3 pa = p-a, ba = b-a;
	    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
	    return length( pa - ba*h ) - r;
    }

    float sdTriPrism( vec3 p, vec2 h )
    {
        vec3 q = abs(p);
    #if 0
        return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);
    #else
        float d1 = q.z-h.y;
        float d2 = max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5;
        return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);
    #endif
    }

    float sdCylinder( vec3 p, vec2 h )
    {
      vec2 d = abs(vec2(length(p.xz),p.y)) - h;
      return min(max(d.x,d.y),0.0) + length(max(d,0.0));
    }

    float sdCone( in vec3 p, in vec3 c )
    {
        vec2 q = vec2( length(p.xz), p.y );
        float d1 = -q.y-c.z;
        float d2 = max( dot(q,c.xy), q.y);
        return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);
    }

    float sdSphere( vec3 p, float s )
    {
        return length(p)-s;
    }

    float sdBox( vec3 p, vec3 b )
    {
      vec3 d = abs(p) - b;
      return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
    }

    vec2 sdSegment( vec3 p, vec3 a, vec3 b )
    {
	    vec3 pa = p - a;
	    vec3 ba = b - a;
	    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
	
	    return vec2( length( pa - (ba)*h ), h );
    }


    //----------------------------------------------------------------------

    vec4 opSoftMin(vec4 d1, vec4 d2, float r)
    {
        float e = max(r-abs(d1.x-d2.x),0.0);
        float f = min(d1.x,d2.x)- e*e*0.25/r;
        //float w1 = max((d1.x < 0.0) ? 1.0 : 0.0, 0.0);//pow(1.0 - d1.x, 6.0), 0.0);
        //float w2 = max((d2.x < 0.0) ? 1.0 : 0.0, 0.0);//pow(1.0 - d2.x, 6.0), 0.0);
        float w1 = max((d1.x < 0.0) ? 0.0 : pow(max(1.0 - d1.x,0.0), 6.0), 0.0);
        float w2 = max((d2.x < 0.0) ? 0.0 : pow(max(1.0 - d2.x,0.0), 6.0), 0.0);
        vec3 c;
        if(w1+w2 > 0.00001)
            c = ((w1 * d1.yzw) + (w2 * d2.yzw))/(w1+w2);
        else
            c = (d1.x < d2.x) ? d1.yzw : d2.yzw;
        return vec4(f, c);
    }
    vec4 opSoftSub(vec4 d1, vec4 d2, float r)
    {
        d1.x = -d1.x;
        float e = max(r-abs(d1.x-d2.x),0.0);
        float f = min(d1.x,d2.x)- e*e*0.25/r;
        float w1 = max((d1.x < 0.0) ? 1.0 : pow(max(1.0 - d1.x, 0.1), 5.0), 0.0);
        float w2 = max((d2.x < 0.0) ? 1.0 : pow(max(1.0 - d2.x, 0.1), 5.0), 0.0);
        vec3 c = ((w1 * d1.yzw) + (w2 * d2.yzw))/(w1+w2);
        return vec4(-f, c);
    }

    float opUnion( float d1, float d2 )
    {
	    return (d1 < d2) ? d1 : d2;
    }

    //----------------------------------------------------------------------

    vec4 map( in vec3 pos, in vec2 mo )
    {
    #if 0
        vec4 res =           vec4(sdSphere(    pos-vec3( 0.0,0.0, 0.0), 1.00 ),  0.5,0.0,0.0);
        res = opSoftMin(res, vec4(sdBox(       pos-vec3( 1.4,0.25, 0.0), vec3(0.50)), 0.0,0.0,0.5), 0.25);
        res = opSoftMin(res, vec4(sdSphere(    pos-vec3( -1.5,0.1, 0.0), 0.70 ),  0.0,0.5,0.0), 0.25);
        res = opSoftMin(res, vec4(sdSphere(    pos-vec3( -2.5,0.4, 0.0), 0.40 ),  0.7,0.2,0.0), 0.25);
        //res = opSoftMin(res, vec4(sdBox(       pos-vec3( 1.0,0.25, 0.0), vec3(0.50)), 0.0,0.0,0.5), 0.3);
        res = opSoftMin(res, vec4(sdBox(       pos-vec3( 1.5,0.70, 0.0), vec3(0.25)), 0.4,0.5,0.0), 0.3);
        res = opSoftMin(res, vec4(sdBox(       pos-vec3( -mo.x+1.5,mo.y-3.0, 0.0), vec3(0.25)), 1.0,0.1,0.2), 0.3);
        vec2 seg = sdSegment(   pos,vec3( -mo.x+1.5,mo.y-3.0, 0.0), vec3(0.0,0.0,0.0));
        float r = seg.x - 0.1;
        res = opSoftMin(res, vec4(r, 0.4,0.4,0.2), 0.1);
        //res = opSoftSub(res, vec4(sdCylinder(  pos-vec3( 0.0,0.70, 0.4), vec2(0.9,0.1)), 0.4,0.5,0.0), 0.2);
        return res;
    #else
        vec4 res =           vec4(-sdSphere(    pos-vec3( 0.0,0.0, 0.0), 4.00 ),  0.5,0.4,0.0);
        res = opSoftSub(res, vec4(sdBox(       pos-vec3( 1.4,0.25, 0.0), vec3(3.50)), 0.0,0.0,0.5), 0.25);
        res = opSoftSub(res, vec4(sdSphere(    pos-vec3( -4.5,0.1, 0.0), 1.70 ),  0.0,0.5,0.0), 0.25);
        res = opSoftSub(res, vec4(sdSphere(    pos-vec3( -2.5,0.4, -2.4), 2.40 ),  0.7,0.2,0.0), 0.25);
        res = opSoftMin(res, vec4(sdBox(       pos-vec3( 1.0,0.25, 0.0), vec3(0.50)), 0.0,0.0,0.5), 0.3);
        res = opSoftMin(res, vec4(sdBox(       pos-vec3( 1.5,0.70, 0.0), vec3(0.25)), 0.4,0.5,0.0), 0.3);
        res = opSoftSub(res, vec4(sdBox(       pos-vec3( -mo.x+1.5,mo.y-6.0, 0.0), vec3(2.25)), 1.0,0.1,0.2), 2.8);
        //vec2 seg = sdSegment(   pos,vec3( -mo.x+1.5,mo.y-3.0, 0.0), vec3(0.0,0.0,0.0));
        //float r = seg.x - 0.1;
        //res = opSoftMin(res, vec4(r, 0.4,0.4,0.2), 0.1);
        //res = opSoftSub(res, vec4(sdCylinder(  pos-vec3( 0.0,0.70, 0.4), vec2(0.9,0.1)), 0.4,0.5,0.0), 0.2);
        return res;
    #endif
    }
    vec4 map2( in vec3 pos, in vec2 mo )
    {
        vec4 res =           vec4(sdSphere(    pos-vec3( 0.0,0.0, 0.0), 4.00 ),  0.5,0.4,0.0);
        res = opSoftMin(res, vec4(sdBox(       pos-vec3( 1.4,0.25, 0.0), vec3(3.50)), 0.0,0.0,0.5), 0.25);
        res = opSoftMin(res, vec4(sdSphere(    pos-vec3( -4.5,0.1, 0.0), 1.70 ),  0.0,0.5,0.0), 0.25);
        res = opSoftMin(res, vec4(sdSphere(    pos-vec3( -2.5,0.4, -2.4), 2.40 ),  0.7,0.2,0.0), 0.25);
        res = opSoftMin(res, vec4(sdBox(       pos-vec3( 1.0,0.25, 0.0), vec3(0.50)), 0.0,0.0,0.5), 0.3);
        res = opSoftMin(res, vec4(sdBox(       pos-vec3( 1.5,0.70, 0.0), vec3(0.25)), 0.4,0.5,0.0), 0.3);
        res = opSoftMin(res, vec4(sdBox(       pos-vec3( -mo.x+1.5,mo.y-6.0, 0.0), vec3(2.25)), 1.0,0.1,0.2), 0.8);
        return res;
    }

    vec4 castRay( in vec3 ro, in vec3 rd, in vec2 mo )
    {
        float tmin = 1.0;
        float tmax = 20.0;
    
    #if 0
        float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );
        float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );
                                                     else           tmax = min( tmax, tp2 ); }
    #endif
    
	    float precis = 0.001;
        float t = tmin;
        vec3 m = vec3(-1.0);
        for( int i=0; i<100; i++ )
        {
	        vec4 res = map( ro+rd*t, mo );
            if( res.x < precis || t>tmax )
                break;
            t += res.x;
	        m = res.yzw;
        }
        if( t<=tmin ) {
            tmin = 1.0;
            tmax = 20.0;

            precis = 0.001;
            t = tmin;
            m = vec3(-1.0);
            for( int i=0; i<100; i++ )
            {
                vec4 res = map2( ro+rd*t, mo );
                if( res.x < precis || t>tmax )
                    break;
                t += res.x;
                m = res.yzw;
            }
        }

        if( t>tmax ) {
            m=vec3(-1.0);
        }
        return vec4( t, m );
    }


    vec3 calcNormal( in vec3 pos, in vec2 mo)
    {
	    vec3 eps = vec3( 0.001, 0.0, 0.0 );
	    vec3 nor = vec3(
	        map(pos+eps.xyy, mo).x - map(pos-eps.xyy, mo).x,
	        map(pos+eps.yxy, mo).x - map(pos-eps.yxy, mo).x,
	        map(pos+eps.yyx, mo).x - map(pos-eps.yyx, mo).x );
	    return normalize(nor);
    }

    vec3 render( in vec3 ro, in vec3 rd, in vec2 mo )
    { 
        vec4 res = castRay(ro,rd, mo);
        float t = res.x;
	    vec3 col = res.yzw;
        if( col.x > -0.5 )
        {
            vec3 pos = ro + t*rd;
            vec3 nor = calcNormal( pos, mo );
            vec3 ref = reflect( rd, nor );
        
            // lighitng        
		    vec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );
		    float amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );
            float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
            float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);
            float dom = smoothstep( -0.1, 0.1, ref.y );
            float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );
		    float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);
        
		    vec3 brdf = vec3(0.0);
            brdf += 1.20*dif*vec3(1.00,0.90,0.60);
		    brdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;
            brdf += 0.30*amb*vec3(0.50,0.70,1.00);
            brdf += 0.40*dom*vec3(0.50,0.70,1.00);
            brdf += 0.30*bac*vec3(0.25,0.25,0.25);
            brdf += 0.40*fre*vec3(1.00,1.00,1.00);
		    brdf += 0.02;
		    col = col*brdf;

    	    col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*t*t ) );

        }

	    return vec3( clamp(col,0.0,1.0) );
    }

    mat3 setCamera( in vec3 ro, in vec3 ta, float cr )
    {
	    vec3 cw = normalize(ta-ro);
	    vec3 cp = vec3(sin(cr), cos(cr),0.0);
	    vec3 cu = normalize( cross(cw,cp) );
	    vec3 cv = normalize( cross(cu,cw) );
        return mat3( cu, cv, cw );
    }

    void mainImage( out vec4 fragColor, in vec2 fragCoord )
    {
	    vec2 q = fragCoord.xy/iResolution.xy;
        vec2 p = -1.0+2.0*q;
	    p.x *= iResolution.x/iResolution.y;
        vec2 mo = iMouse.xy/iResolution.xy;
        //mo = vec2(50.0, 0.0);
		 
	    float time = iGlobalTime;

	    // camera	
	    vec3 ro = vec3( (0.4+2.0*mo.y)*4.5*cos(0.1*time + 6.0*mo.x), 1.0, (0.4+2.0*mo.y)*4.5*sin(0.1*time + 6.0*mo.x) );
	    vec3 ta = vec3( -0.0, -0.0, 0.0 );
	
	    // camera-to-world transformation
        mat3 ca = setCamera( ro, ta, 0.0 );
    
        // ray direction
	    vec3 rd = ca * normalize( vec3(p.xy,2.0) );

        // render	
         mo = 6.0*iMouse.xy/iResolution.xy;
        vec3 col = render( ro, rd, mo );

	    col = pow( col, vec3(0.4545) );

        fragColor=vec4( col, 1.0 );
    }
}// GLSLShader global SToy1

GLSLShader SToy2
{
void mainImage( out vec4 o,  vec2 U )
{
    o = vec4(0.0);
    float r=.1, t=iGlobalTime, H = iResolution.y;
    U /=  H;                              // object : disc(P,r)
    vec2 P = .5+.5*vec2(cos(t),sin(t*.7)), fU;  
    U*=.5; P*=.5;                         // unzoom for the whole domain falls within [0,1]^n
    
    o.b = .25;                            // backgroud = cold blue
    
    for (int i=0; i<7; i++) {             // to the infinity, and beyond ! :-)
        fU = min(U,1.-U); if (min(fU.x,fU.y) < 3.*r/H) { o--; break; } // cell border
    	if (length(P-.5) - r > .7) break; // cell is out of the shape

                // --- iterate to child cell
        fU = step(.5,U);                  // select child
        U = 2.*U - fU;                    // go to new local frame
        P = 2.*P - fU;  r *= 2.;
        
        o += .13;                         // getting closer, getting hotter
    }
               
	o.gb *= smoothstep(.9,1.,length(P-U)/r); // draw object
}
}

//--------------------------------------------------------------------------------------
// sampler states are outside of GLSL.
//--------------------------------------------------------------------------------------
SamplerState nearestSampler
{
    TEXTURE_MIN_FILTER = NEAREST;
    TEXTURE_MAG_FILTER = NEAREST;
}
SamplerState linearSampler
{
    TEXTURE_MIN_FILTER = LINEAR;
    TEXTURE_MAG_FILTER = LINEAR;
}

//--------------------------------------------------------------------------------------
//    Fullscreen quad Vertex shader
//--------------------------------------------------------------------------------------
GLSLShader global fullscreenquadVS
{
    layout(location=0) in vec4 Position;
    layout(location=1) in vec3 TexCoord;
    layout(location=0) out vec3 tc;
    out gl_PerVertex {
        vec4 gl_Position;
    };
    void main()
    {
        tc = TexCoord;
        gl_Position = Position;
    }
}
//--------------------------------------------------------------------------------------
//    Simple texture fetch
//--------------------------------------------------------------------------------------
GLSLShader global fullscreenquadPS
{
    // we can keep local some uniforms. So they aren't visible outside from others
    uniform sampler2D quadSampler;
    layout(location=0) in vec3 tc;
    layout(location=0) out vec4 fragColor;
    void main()
    {
        mainImage( fragColor, gl_FragCoord.xy );
    }
}
//**************************************************************************************
//**************************************************************************************
//****
//**** EFFECTS EFFECTS EFFECTS EFFECTS EFFECTS EFFECTS EFFECTS EFFECTS EFFECTS      ****
//****
//**************************************************************************************
//**************************************************************************************

//************* Render through a FBO for HDR & optional downsampling
Technique Base
{
    Pass P1
    {
        DEPTH_TEST = FALSE;
        renderMode = fullscreen_quad;
        currentTarget = backbuffer;
        VertexProgram = fullscreenquadVS;
        FragmentProgram = { fullscreenquadPS, SToy2};
        CULL_FACE = false;
    }
}
